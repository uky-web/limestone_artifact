{"version":3,"sources":["includes/_fonts.scss","pattern-scaffolding.css","tokens/_typography.scss","pattern-scaffolding.scss","includes/root-rhythm/_rr-grid.scss","includes/root-rhythm/_rr-util.scss","includes/root-rhythm/_rr-baseline.scss","includes/root-rhythm/_rr-config.scss"],"names":[],"mappings":"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","file":"pattern-scaffolding.css","sourcesContent":["@use \"../tokens/typography\";\n//sass-lint:disable no-url-domains, no-url-protocols, no-duplicate-properties\n\n//Required for Hoefler (typography.com) licensing\n@import url('https://cloud.typography.com/7932236/7395812/css/fonts.css');\n\n@import url(\"https://use.typekit.net/axt6iqz.css\");\n\n@font-face {\n  font-family: 'blackbikeclean';\n  font-weight: normal;\n  font-style: normal;\n  src: url('../fonts/blackbike-clean-webfont.woff2') format('woff2'), url('../fonts/blackbike-clean-webfont.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'blackbikerough';\n  font-style: normal;\n  font-weight: normal;\n  src: url('../fonts/blackbike-rough-webfont.woff2') format('woff2'), url('../fonts/blackbike-rough-webfont.woff') format('woff');\n}\n\nbody {\n  font-family: typography.$font-usual;\n  font-weight:300;\n}\n\n.font-mercury {\n  font-family: typography.$font-mercury;\n}\n\n.font-avenirnext {\n  font-family: typography.$font-usual;\n}\n.font-usual {\n  font-family: typography.$font-usual;\n}\n\n\n.font-surveyor {\n  font-family: typography.$font-surveyor;\n}\n\n.font-tradegothic {\n  font-family: typography.$font-gothic-atf;\n}\n\n.font-gothic-atf {\n  font-family: typography.$font-gothic-atf;\n}\n\n.font-blackbikeclean {\n  font-family: typography.$font-blackbikeclean;\n}\n\n.font-blackbikerough {\n  font-family: typography.$font-blackbikerough;\n}\n","@import url(\"https://cloud.typography.com/7932236/7395812/css/fonts.css\");\n@import url(\"https://use.typekit.net/axt6iqz.css\");\n@font-face {\n  font-family: \"blackbikeclean\";\n  font-weight: normal;\n  font-style: normal;\n  src: url(\"../fonts/blackbike-clean-webfont.woff2\") format(\"woff2\"), url(\"../fonts/blackbike-clean-webfont.woff\") format(\"woff\");\n}\n@font-face {\n  font-family: \"blackbikerough\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/blackbike-rough-webfont.woff2\") format(\"woff2\"), url(\"../fonts/blackbike-rough-webfont.woff\") format(\"woff\");\n}\nbody {\n  font-family: \"usual\", sans-serif;\n  font-weight: 300;\n}\n\n.font-mercury {\n  font-family: \"usual\", sans-serif;\n}\n\n.font-avenirnext {\n  font-family: \"usual\", sans-serif;\n}\n\n.font-usual {\n  font-family: \"usual\", sans-serif;\n}\n\n.font-surveyor {\n  font-family: \"Surveyor Display A\", \"Surveyor Display B\", serif;\n}\n\n.font-tradegothic {\n  font-family: \"alternate-gothic-atf\", sans-serif;\n}\n\n.font-gothic-atf {\n  font-family: \"alternate-gothic-atf\", sans-serif;\n}\n\n.font-blackbikeclean {\n  font-family: \"blackbikeclean\", serif;\n}\n\n.font-blackbikerough {\n  font-family: \"blackbikerough\", serif;\n}\n\n#sg-patterns {\n  max-width: 100%;\n}\n\n.demo-animate {\n  margin-bottom: 1em;\n  padding: 1em;\n  border-radius: 8px;\n  background: #515664;\n  text-align: center;\n  cursor: pointer;\n}\n\n.sg-colors {\n  margin-left: 0;\n  list-style: none;\n}\n.sg-colors .sg-colors__column {\n  margin-bottom: 1rem;\n  box-sizing: border-box;\n}\n@media screen and (min-width: 35rem) {\n  .sg-colors {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: stretch;\n    justify-content: space-between;\n  }\n  .sg-colors .sg-colors__column {\n    flex: 0 1 auto;\n    width: calc(50% - 1rem);\n    margin: 0 0 2rem;\n  }\n}\n@media screen and (min-width: 58rem) {\n  .sg-colors .sg-colors__column {\n    flex: 0 1 auto;\n    width: calc(25% - 1rem);\n    margin: 0 0 2rem;\n  }\n}\n@supports (grid-template-columns: 1px) {\n  .sg-colors {\n    display: grid;\n    grid-auto-rows: auto;\n    grid-gap: 0.5rem;\n    grid-auto-rows: auto;\n    grid-auto-rows: auto;\n    grid-auto-rows: auto;\n    grid-auto-rows: auto;\n  }\n  .sg-colors .sg-colors__column {\n    width: auto;\n    margin: 0;\n  }\n  @media screen and (min-width: 35rem) {\n    .sg-colors {\n      grid-gap: 1rem;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n    }\n  }\n  @media screen and (min-width: 58rem) {\n    .sg-colors {\n      grid-template-columns: repeat(4, minmax(0, 1fr));\n    }\n  }\n  @media screen and (min-width: 76rem) {\n    .sg-colors {\n      grid-gap: 2rem;\n    }\n  }\n}\n\n.sg-colors__column {\n  padding: calc(0.5rem - 2px);\n  border: 2px solid #c8c8c7;\n  border-radius: 8px;\n  overflow: hidden;\n  font-size: 1rem;\n  line-height: 1rem;\n}\n@media screen and (min-width: 76rem) {\n  .sg-colors__column {\n    font-size: 1rem;\n    line-height: 1rem;\n  }\n}\n.sg-colors__column margin {\n  top: 1rem;\n  bottom: 1rem;\n}\n\n.sg-colors pre {\n  font-size: 0.75rem;\n  line-height: 1rem;\n  margin-bottom: 0.5rem;\n}\n@media screen and (min-width: 76rem) {\n  .sg-colors pre {\n    font-size: 0.75rem;\n    line-height: 1rem;\n  }\n}\n\n.sg-swatch {\n  display: block;\n  height: 5rem;\n  margin-bottom: 0.5rem;\n  padding: calc(0.5rem - 5px);\n  border-radius: 5px;\n}\n\n.sg-pattern-example {\n  overflow: hidden;\n}\n\n.sg-pattern {\n  margin-bottom: 2rem;\n}\n\n.sg-pattern-head {\n  padding: 0.5rem;\n}\n\n.sg-pattern-title padding {\n  top: 1rem;\n  bottom: 1rem;\n}\n.sg-pattern-title a {\n  padding: 0;\n  border-bottom-width: 0;\n}\n\n.sg-pattern-extra {\n  display: none;\n}\n\n.sg-image-grid .sg-image-grid-tile {\n  margin-bottom: 2rem;\n}\n@media screen and (min-width: 44rem) {\n  .sg-image-grid {\n    display: flex;\n    margin-right: -1rem;\n    margin-left: -1rem;\n  }\n  .sg-image-grid .sg-image-grid-tile {\n    margin-right: 1rem;\n    margin-bottom: 0;\n    margin-left: 1rem;\n  }\n}\n\nbody.layout-grid--on::before {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  max-width: 72rem;\n  min-height: 100vh;\n  margin-right: auto;\n  margin-left: auto;\n  content: \"\";\n  z-index: 1000;\n  pointer-events: none;\n  mix-blend-mode: exclusion;\n  width: calc(100% - (2 * 1rem));\n  background-image: repeating-linear-gradient(to left, transparent 0, transparent 0.5rem, rgba(200, 200, 255, 0.2) 0.5rem, rgba(200, 200, 255, 0.2) 25%);\n  background-size: calc(100% + 0.5rem);\n}\n@media screen and (min-width: 35rem) {\n  body.layout-grid--on::before {\n    width: calc(100% - (2 * 2rem));\n    background-image: repeating-linear-gradient(to left, transparent 0, transparent 1rem, rgba(255, 200, 200, 0.2) 1rem, rgba(255, 200, 200, 0.2) 12.5%);\n    background-size: calc(100% + 1rem);\n  }\n}\n@media screen and (min-width: 58rem) {\n  body.layout-grid--on::before {\n    width: calc(100% - (2 * 2rem));\n    background-image: repeating-linear-gradient(to left, transparent 0, transparent 1rem, rgba(128, 255, 200, 0.2) 1rem, rgba(128, 255, 200, 0.2) 8.3333333333%);\n    background-size: calc(100% + 1rem);\n  }\n}\n@media screen and (min-width: 76rem) {\n  body.layout-grid--on::before {\n    width: 100%;\n    background-image: repeating-linear-gradient(to left, transparent 0, transparent 2rem, rgba(200, 128, 255, 0.2) 2rem, rgba(200, 128, 255, 0.2) 8.3333333333%);\n    background-size: calc(100% + 2rem);\n  }\n}\n@media screen and (min-width: 80rem) {\n  body.layout-grid--on::before {\n    width: 100%;\n    background-image: repeating-linear-gradient(to left, transparent 0, transparent 2rem, rgba(200, 128, 255, 0.2) 2rem, rgba(200, 128, 255, 0.2) 8.3333333333%);\n    background-size: calc(100% + 2rem);\n  }\n}\nbody.layout-grid--on::after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  min-height: 100vh;\n  margin-right: auto;\n  margin-left: auto;\n  content: \"\";\n  z-index: 1000;\n  pointer-events: none;\n  mix-blend-mode: exclusion;\n  background: transparent linear-gradient(to top, rgba(128, 128, 200, 0.2) 0, rgba(128, 128, 200, 0.2) 1px, transparent 1px, transparent 100%) scroll repeat left top/100% 0.5rem;\n}\n@media screen and (min-width: 35rem) {\n  body.layout-grid--on::after {\n    background: transparent linear-gradient(to top, rgba(128, 128, 200, 0.2) 0, rgba(128, 128, 200, 0.2) 1px, transparent 1px, transparent 100%) scroll repeat left top/100% 0.5rem;\n  }\n}\n@media screen and (min-width: 58rem) {\n  body.layout-grid--on::after {\n    background: transparent linear-gradient(to top, rgba(128, 128, 200, 0.2) 0, rgba(128, 128, 200, 0.2) 1px, transparent 1px, transparent 100%) scroll repeat left top/100% 0.5rem;\n  }\n}\n@media screen and (min-width: 76rem) {\n  body.layout-grid--on::after {\n    background: transparent linear-gradient(to top, rgba(128, 128, 200, 0.2) 0, rgba(128, 128, 200, 0.2) 1px, transparent 1px, transparent 100%) scroll repeat left top/100% 0.5rem;\n  }\n}\n@media screen and (min-width: 80rem) {\n  body.layout-grid--on::after {\n    background: transparent linear-gradient(to top, rgba(128, 128, 200, 0.2) 0, rgba(128, 128, 200, 0.2) 1px, transparent 1px, transparent 100%) scroll repeat left top/100% 0.5rem;\n  }\n}\n\n.toggleGroup {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  z-index: 999;\n}\n.toggleGroup button {\n  display: inline-block;\n  padding: 2px 8px;\n  border-radius: 8px;\n  border-color: #000000;\n  background-color: #000000;\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 1;\n}\n\n.twig-include {\n  position: relative;\n}\n\n.twig-include__label {\n  display: none;\n  position: absolute;\n  top: 0;\n  right: 1rem;\n  color: #c12c2b;\n  z-index: 998;\n}\n\nbody.twig-includes--on .twig-include {\n  border: 2px solid #c12c2b;\n}\nbody.twig-includes--on .twig-include__label {\n  display: block;\n}","@use 'root-rhythm';\n\n// Font Shortcuts\n// Mercury Display (deprecated)\n$font-mercury: 'usual', sans-serif;\n\n// Surveyor Display (from typography.com)  NB: limited weights and styles provided, see typography.com project dashboard\n$font-surveyor: \"Surveyor Display A\", \"Surveyor Display B\", serif;\n\n$font-avenirnext: 'usual', sans-serif;\n$font-usual:'usual', sans-serif;\n\n// Trade Gothic styles (from fonts.com)\n$font-tradegothic: 'alternate-gothic-atf',sans-serif;\n$font-gothic-atf:  'alternate-gothic-atf',sans-serif;\n\n// Blackbike styles (generated from fontsquirrel.com)\n$font-blackbikeclean: 'blackbikeclean', serif;\n$font-blackbikerough: 'blackbikerough', serif;\n\n\n// Line heights in grid units. These are all\n// relative to the font size, so \"tight\" has a line\n// height that represents just enough space\n// to contain a line of font text, whereas \"redic\"\n// is pretty massive.\n//\n// rr-font-compute(size,lineheight) will provide\n// a font-size, line-height combination in rem,\n// along with the required media queries to ensure\n// font sizes change in a standardized fashion.\n//\n// It is preferable to using font size and line\n// height directly in the code.\n$lineheights: (\n  hpc: -2,\n  squeeze: -1,\n  tight: 0,\n  medium: 1,\n  wide: 2,\n  huge: 3,\n  redic: 4\n);\n\n// This map lets us specify font sizes by a name\n// rather than a specific value. You can create\n// new sizes by adding a new name. The font sizes\n// change based on breakpoint.\n\n// rr-font-compute(size,lineheight) will provide\n// a font-size, line-height combination in rem,\n// along with the required media queries to ensure\n// font sizes change in a standardized fashion.\n//\n// It is preferable to using font size and line\n// height directly in the code.\n$fonts: (\n  s: (\n    xs: .75rem,\n    s: .875rem,\n    r: 1rem,\n    l: 1.1667rem,\n    xl: 1.25rem,\n    2xl: 1.5rem,\n    3xl: 1.775rem,\n    4xl: 2rem,\n    5xl: 2.4286rem,\n    6xl: 4.5rem\n  ),\n  xl: (\n    xs: .75rem,\n    s: .875rem,\n    r: 1rem,\n    l: 1.1667rem,\n    xl: 1.25rem,\n    2xl: 1.5rem,\n    3xl: 1.875rem,\n    4xl: 2.375rem,\n    5xl: 3.4286rem,\n    6xl: 6.3rem\n  )\n);\n\n$font-sizes: root-rhythm.rr-font-sizes();\n\n// Establish header sizes for the editorial\n// headings.\n$editorial-headings: (\n  h2: (\n    size: 4xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h3: (\n    size: 3xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h4: (\n    size: xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h5: (\n    size: xl,\n    lineheight: tight,\n    weight: normal,\n    style: italic\n  ),\n  h6: (\n    size: l,\n    lineheight: tight,\n    weight: normal\n  )\n);\n\n// // Set rr defaults\n\n// $rr-fonts: $fonts;\n// $rr-lineheights: $lineheights;","//\n// This stylesheet is for styles you want to include only when displaying demo\n// styles for grids, animations, color swatches, etc.\n// These styles will not be your production CSS.\n//\n\n@use 'includes/root-rhythm';\n@use 'includes/color-functions';\n@use 'tokens/typography';\n@import 'includes/design-variables';\n@import 'includes/mixins/m_typography';\n@import 'includes/fonts';\n\n//sass-lint:disable no-ids\n#sg-patterns {\n  max-width: 100%;\n}\n//sass-lint:enable no-ids\n\n.demo-animate {\n  margin-bottom: 1em;\n  padding: 1em;\n  border-radius: 8px;\n  background: color-functions.color(dark-gray);\n  text-align: center;\n  cursor: pointer;\n}\n\n.sg-colors {\n  margin-left: 0;\n  list-style: none;\n  @include root-rhythm.css-grid-columns(map-get(root-rhythm.$rr-grids, 4-up));\n}\n\n.sg-colors__column {\n  padding: root-rhythm.rr-grid-remainder(2px);\n  border: 2px solid color-functions.color(light-gray);\n  border-radius: 8px;\n  overflow: hidden;\n  @include root-rhythm.rr-font-compute(r, tight, typography.$fonts, typography.$lineheights);\n\n  margin {\n    top: root-rhythm.rr-gridbase(2);\n    bottom: root-rhythm.rr-gridbase(2);\n  }\n}\n\n.sg-colors pre {\n  @include root-rhythm.rr-font-compute(xs, tight, typography.$fonts, typography.$lineheights);\n  margin-bottom: root-rhythm.rr-gridbase();\n}\n\n.sg-swatch {\n  display: block;\n  height: root-rhythm.rr-gridbase(10);\n  margin-bottom: root-rhythm.rr-gridbase();\n  padding: root-rhythm.rr-grid-remainder(5px);\n  border-radius: 5px;\n}\n\n.sg-pattern-example {\n  overflow: hidden;\n}\n\n.sg-pattern {\n  margin-bottom: root-rhythm.rr-gridbase(4);\n}\n\n.sg-pattern-head {\n  @include root-rhythm.rr-font-compute(r, typography.$fonts, typography.$lineheights);\n  padding: root-rhythm.rr-gridbase();\n}\n\n.sg-pattern-title {\n  padding {\n    top: root-rhythm.rr-gridbase(2);\n    bottom: root-rhythm.rr-gridbase(2);\n  }\n\n  a {\n    padding: 0;\n    border-bottom-width: 0;\n  }\n}\n\n.sg-pattern-extra {\n  display: none;\n}\n\n.sg-image-grid {\n  .sg-image-grid-tile {\n    margin-bottom: 2rem;\n  }\n\n  @media screen and ( min-width: 44rem ) {\n    display: flex;\n    margin-right: -1rem;\n    margin-left: -1rem;\n\n    .sg-image-grid-tile {\n      margin-right: 1rem;\n      margin-bottom: 0;\n      margin-left: 1rem;\n    }\n  }\n}\n\nbody.layout-grid--on {\n  @include root-rhythm.rr-grid-overlay;\n}\n\n.toggleGroup {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  z-index: 999;\n\n  button {\n    display: inline-block;\n\n    padding: 2px 8px;\n    border-radius: 8px;\n    border-color: color-functions.color(wildcat-black);\n    background-color: color-functions.color(wildcat-black);\n    font-size: 12px;\n    font-weight: bold;\n    line-height: 1;\n  }\n}\n\n.twig-include {\n  position: relative;\n}\n\n.twig-include__label {\n  display: none;\n\n  position: absolute;\n  top: 0;\n  right: 1rem;\n  color: color-functions.color(alert);\n  z-index: 998;\n}\n\nbody.twig-includes--on {\n  .twig-include {\n    border: 2px solid color-functions.color(alert);\n  }\n\n  .twig-include__label {\n    display: block;\n  }\n}\n","@use \"rr-util\" as *;\n@use \"rr-config\" as *;\n\n\n// Creates a slab for a slab layout. \n// Layout options are provided in other mixins\n// All options are driven by the global configuration\n// Slabs bring their own padding to the party which \n// we will override in some special circumstances.\n@mixin rr-slab {\n  $breaks: rr-breakpoint-list();\n  @each $break in $breaks {\n    $vspace: rr-gridbase(rr-prop-for-breakpoint($break, vspace));\n    @if $break == nth($breaks, 1) {\n      padding: $vspace rr-prop-for-breakpoint($break, offset);\n    } @else {\n      @include rr-break-directive($break) {\n        padding: $vspace rr-prop-for-breakpoint($break, offset);\n      }\n    }\n  }\n}\n\n// This creates a slab wrapper constrained to the main content width\n@mixin rr-slab-wrapper($margins: false) {\n  max-width: $rr-maxwidth;\n  margin: 0 auto;\n  @if not $margins {\n\n    // Get rid of top margins on the first child,\n    // bottom margins on the second so those\n    // margins don't pop out of the wrapper.\n    > :first-child {\n      margin-top: 0;\n    }\n\n    > :last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n\n// This creates a full-bleed slab wrapper\n@mixin rr-slab-full-fullbleed {\n  max-width: none;\n  margin: 0;\n\n  > :first-child {\n    margin-top: 0;\n  }\n\n  > :last-child {\n    margin-bottom: 0;\n  }\n}\n\n// Pass this a list of class names (without the '.' prefix) and \n// adjacency classes that collapse padding between the \n@mixin rr-slab-adjacency($style-list) {\n  @each $style in $style-list {\n    .#{\"\"+$style}+.#{\"\"+$style} {\n      padding-top: 0;\n    }\n  }\n}\n\n@function rr-columns-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, columns) {\n      @return map-get($break-template, columns);\n    }\n  }\n  @return null;\n}\n\n@function rr-areas-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, areas) {\n      @return map-get($break-template, areas);\n    }\n  }\n  @return null;\n}\n\n@function rr-flex-areas-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, flex-areas) {\n      @return map-get($break-template, flex-areas);\n    }\n  }\n  @return null;\n}\n\n@function rr-flex-columns-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, flex-columns) {\n      @return map-get($break-template, flex-columns);\n    }\n  }\n  @return null;\n}\n\n// Code below is by Jesse Janowiak of NewCity; currently \n// working on integrating it with the existing code.\n// CSS GRID MIXINS\n//  `css-grid-columns( $count, $gutter, $gutter-s, $class-prefix, $breakpoint, $rr-support-ie)`\n//  `content-width( $count, $class-prefix, $breakpoint, $rr-support-ie )`\n//  `reverse-grid-columns( $count, $class-prefix, $breakpoint, $rr-support-ie )`\n// DEPENDENCIES\n// These mixins currently rely on Zurb's Foundation 6 for Sites Sass libraries,\n// specifically the `breakpoint` mixin and breakpoint values set in `foundation-settings`\n// SHARED VARIABLES\n$global-width: $rr-maxwidth !default;\n// `css-grid-columns` mixin\n// Builds a basic multi-column layout using pure CSS Grid.\n// Best used with content that divides evenly into full rows of the specified column count.\n//\n// Supports the following settings:\n//\n// $count:         The number of columns each row; defaults to 3\n// $gutter:        The space between columns; defaults to Foundation's\n//                 global $grid-column-gutter.\n//                 NOTE: Row gaps are not supported in IE. In this mixin, they are simulated\n//                 with bottom margins when the layout switches to single column.\n//                 If `$rr-support-ie` is disabled, `$gutter` can be either a single value applied\n//                 to both row and column gutters, or two values of the format\n//                 `row-gutter column-gutter`\n// $gutter-s:      If your grid breakpoint is set to 'small' so that the layout remains columned even\n//                 at the smallest breakpoint, you may want to use a narrower column gutter at that breakpoint.\n//                 Set the small gutter value here.\n// $class-prefix:  By default, all styles applied to child columns will be applied to the class\n//                 `&__column`. If you want to use a different prefix for columns than for the parent\n//                  class, set this value. DO include the leading `.`\n// $breakpoint:    The breakpoint above which the layout switches from a single column to\n//                 the specified column count. Accepts a predefined breakpoint\n//                 definition (e.g. 'medium') or a unitless pixel width.\n//                 Requires Foundation's `breakpoint` mixin or another breakpoint mixin\n//                 with the same syntax.\n// $reverse:       Applies the `reverse-grid-columns` mixin instead of the standard column placement.\n// $rr-support-ie:    If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                 This results in cleaner stylesheet code if you don't need to support those\n//                 browsers.\n//\n// Required html markup (if this mixin is applied to a class called `.row-container`):\n// <div class=\"row-container\">\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n// </div>\n@mixin css-grid-columns($templates, $config: $rr-grid-settings, $class-prefix: null, $reverse: false) {\n  $medium-size: rr-prop-for-breakpoint(m, size);\n  @if not $class-prefix {\n    $class-prefix: #{&};\n  }\n\n  $breaks: rr-breakpoint-list();\n  $flex-initialized: false;\n\n  #{$class-prefix}__column {\n    margin-bottom: rr-gridbase(2);\n    box-sizing: border-box;\n  }\n  @each $break in $breaks {\n    $num-columns: rr-columns-for-template($templates, $break);\n    $grid-gap: rr-prop-for-breakpoint($break, gutter);\n    $grid-areas: rr-areas-for-template($templates, $break);\n    $flex-areas: rr-flex-areas-for-template($templates, $break);\n    @include rr-break-directive($break) {\n      @if $num-columns {\n        $width: percentage(calc(1 / $num-columns));\n        @if (not $flex-initialized) {\n          display: flex;\n          flex-wrap: wrap;\n          align-items: stretch;\n          justify-content: space-between;\n          $flex-initialized: true;\n        }\n        @if (not $flex-areas) {\n          #{$class-prefix}__column {\n            flex: 0 1 auto;\n            width: calc(#{$width} - #{$grid-gap});\n            @if $grid-gap {\n              margin: 0 0 ($grid-gap * 2);\n            }\n          }\n        }\n      }\n      @if $flex-areas {\n        @each $area,\n        $width in $flex-areas {\n          // try https://hugogiraudel.com/2014/01/27/casting-types-in-sass/\n          #{$class-prefix}__column--#{$area} {\n            flex: 0 1 auto;\n            width: calc(#{$width} - #{$grid-gap});\n          }\n        }\n      }\n    }\n  }\n  @supports ( grid-template-columns: 1px) {\n    display: grid;\n\n    #{$class-prefix}__column {\n      width: auto;\n      margin: 0;\n    }\n    @each $break in $breaks {\n      $num-columns: rr-columns-for-template($templates, $break);\n      $grid-gap: rr-strict-prop-for-breakpoint($break, gutter);\n      $grid-areas: rr-areas-for-template($templates, $break);\n      grid-auto-rows: auto;\n      @if $num-columns or $grid-gap {\n        @include rr-break-directive($break) {\n          @if $grid-gap {\n            grid-gap: rr-prop-for-breakpoint($break, gutter);\n          }\n          @if $num-columns {\n            grid-template-columns: repeat(#{$num-columns}, minmax(0, 1fr));\n          }\n          @if $grid-areas {\n            grid-template-areas: '#{$grid-areas}';\n          }\n        }\n      }\n    }\n  }\n}\n\n\n// `reverse-grid-columns` mixin\n//  Changes the column order of a row created with the `css-grid-columns` from left-to-right\n//  to right-to-left. It can be set as the default layout for a specific class by passing `$reverse: true`\n//  to `css-grid-columns`, or it can be used as a stand-alone mixin for reversing the columns of\n//  an existing grid layout.\n//  NOTE: If applied to a row that is already right-to-left, this mixin will NOT switch it back to\n//        left-to-right. It only works in one direction.\n//\n// Supports the following settings:\n//\n// $count:         The number of columns each row; defaults to 3\n// $class-prefix:  By default, all styles applied to child columns will be applied to the class\n//                 `&__column`. If you want to use a different prefix for columns than for the parent\n//                  class, set this value. DO include the leading `.`\n// $breakpoint:    The breakpoint above which the layout switches from a single column to\n//                 the specified column count. Accepts a predefined breakpoint\n//                 definition (e.g. 'medium') or a unitless pixel width.\n//                 Requires Foundation's `breakpoint` mixin or another breakpoint mixin\n//                 with the same syntax.\n// $rr-support-ie:    If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                 This results in cleaner stylesheet code if you don't need to support those\n//                 browsers.\n@mixin reverse-grid-columns($count: 3, $class-prefix: '', $breakpoint: 'medium', $rr-support-ie: true) {\n  @if $class-prefix == '' {\n    $class-prefix: #{&};\n  }\n  $class-prefix: #{'.' + $class-prefix};\n\n  #{$class-prefix}__column {\n    $ms-columns: $count + $count - 1;\n    @for $i from 0 through $count - 1 {\n      @include breakpoint($breakpoint) {\n        &:nth-child(#{$i + 1}) {\n          -ms-grid-column: $ms-columns - (($i + 1) * 2 - 1) + 1;\n          @supports ( grid-column-start: 1) {\n            grid-column-start: $count - $i;\n            grid-row: 1;\n          }\n        }\n      }\n    }\n  }\n}\n\n// `content-width` mixin\n//  For the common use-case of a content column that needs to be restricted to a maximum width and centered\n//  horizontally in the viewport. Can optionally include a left and right gutter value so that a specific\n//  amount of vertical space is always reserved between the content and the viewport edges.\n//\n//  Supports the following settings:\n//\n//  $max-width:          The maximum width of the content inside this container\n//  $gutter:             Minimum distance between the content and the left and right viewport edges.\n//                       Defaults to the `$gutter-medium` value set above or inherited from another settings file.\n//  $container-selector: Selector for the content area. Defaults to `&__container`. DO include the leading `.`\n//  $rr-support-ie:         If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                       This results in cleaner stylesheet code if you don't need to support those\n//                       browsers.\n//\n// Required html markup (if this mixin is applied to a class called `.slab` and `$container-selector` is not set):\n// <div class=\"slab\">\n//    <div class=\"slab__container\">\n//      Constrained Content Area\n//    </div>\n// </div>\n@mixin content-width($max-width: $global-width, $gutter: false, $container-selector: '', $rr-support-ie: true) {\n  @if ( $gutter == false) {\n    $gutter: $gutter-medium;\n  }\n  @if ( $container-selector == '') {\n    $container-selector: '#{&}__container';\n  }\n  @if ( $rr-support-ie) {\n    display: -ms-grid;\n    -ms-grid-columns: minmax($gutter, 1fr) minmax(0, $max-width) minmax($gutter, 1fr);\n    -ms-grid-rows: auto;\n\n    #{$container-selector} {\n      -ms-grid-column: 2;\n      grid-column: 2;\n      -ms-grid-column-span: 1;\n      -ms-grid-row: auto;\n      grid-row: auto;\n    }\n  }\n  @supports ( grid-template-columns: 1px) {\n    display: grid;\n    grid-template-columns: [left-margin] minmax($gutter, 1fr) [content-column] minmax(0, $max-width) [right-margin] minmax($gutter, 1fr) [viewport-end];\n\n    #{$container-selector} {\n      grid-column-start: content-column;\n    }\n  }\n}\n","@use \"../../tokens/layout\";\n@use \"rr-config\" as *;\n\n// Gets the list of breakpoints; very useful for walking\n// the configuration.\n@function rr-breakpoint-list($config: layout.$rr-grid-settings) {\n  @return map-keys($config);\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map.\n// This does not compute mobile-first cascade; you need to \n// use `$rr-combined-breakpoint` instead. \n@function rr-breakpoint($tag) {\n  $config: layout.$rr-grid-settings;\n  @if map-has-key($config, $tag) {\n    @return map-get($config, $tag);\n  } @else {\n    @return map-get($config, nth(map-keys($config), 1));\n  }\n}\n\n@function rr-first-breakpoint($break, $config: layout.$rr-grid-settings) {\n  $breaks: rr-breakpoint-list($config);\n  @return $break == nth($breaks, 1);\n}\n\n// Returns the first breakpoint config settings.\n// Remember maps are 1-indexed.\n@function rr-breakpoint-first() {\n  @return rr-breakpoint(nth(rr-breakpoint-list(), 1));\n}\n\n// Compute the size of a grid square, computed in the unit of the\n// line height. You can pass an optional multiplier.\n@function rr-gridbase($multiplier: 1) {\n  @return (calc($rr-line-height / layout.$rr-grid-divisions)) * $multiplier;\n}\n\n// deprecated\n@function rr-grid-units($steps) {\n  @return rr-gridbase($steps);\n}\n\n// Takes an offset value (like the width of a border) and a number of \n// grid steps; returns the size of the remaining grid step area.\n// Useful primarily for adding borders around things. \n@function rr-grid-remainder($offset, $steps: 1) {\n  $result: 0;\n  @if $steps < 1 {\n    $result: 0;\n  } @else {\n    $stepsize: rr-gridbase($steps);\n    @if comparable($offset, $stepsize) {\n      $result: $stepsize - $offset;\n    } @else {\n      $result: calc(#{$stepsize} - #{$offset});\n    }\n  }\n  @return $result;\n}\n\n// Convenience mixin for building breakpoints around the media queries. \n@mixin rr-break-directive($break, $config: layout.$rr-grid-settings) {\n  @if rr-first-breakpoint($break, $config) {\n    // Base Breakpoint\n    @content;\n    // End base breakpoint\n  } @else {\n    $mq: rr-prop-for-breakpoint($break, mq);\n    $size: rr-prop-for-breakpoint($break, size);\n    @media screen and ($mq: $size) {\n      @content;\n    }\n  }\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map. \n// Unlike `rr-breakpoint`, this will look up values from earlier \n// breakpoints. \n@function rr-combined-breakpoint($break: s) {\n  $breaks: rr-breakpoint-list();\n  $work-map: rr-breakpoint-first();\n  $stop: index($breaks, $break);\n  @if not $stop {\n    @return $work-map;\n  } // Bounds-check the stop\n  @if ($stop > 1) {\n    @for $i from 2 through $stop {\n      $tag: nth($breaks, $i);\n      $work-map: map-merge($work-map, rr-breakpoint($tag));\n    }\n  }\n  @return $work-map;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property in the combined breakpoint.\n@function rr-prop-for-breakpoint($break, $prop) {\n  $bp: rr-combined-breakpoint($break);\n  @if map-has-key($bp, $prop) {\n    @return map-get($bp, $prop);\n  }\n  @return null;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property only in the specified breakpoint.\n@function rr-strict-prop-for-breakpoint($break, $prop) {\n  $bp: rr-breakpoint($break);\n  @if map-has-key($bp, $prop) {\n    @return map-get($bp, $prop);\n  }\n  @return null;\n}\n","@use \"rr-config\" as *;\n@use \"rr-grid\" as *;\n@use \"rr-util\" as *;\n\n\n// Render the columns as a repeating linear gradient.\n@function rr-columns($break: s) {\n  $gutter: rr-prop-for-breakpoint($break, gutter);\n  $color: rr-prop-for-breakpoint($break, column_color);\n  $columns: rr-prop-for-breakpoint($break, columns);\n  $colwidth: calc(100% / $columns);\n  @if not $color {\n    $color: rgba(0, 0, 0, .5);\n  }\n  @return repeating-linear-gradient(to left, transparent 0, transparent $gutter, $color $gutter, $color $colwidth);\n}\n\n// Render the baselines as a simple linear gradient. This gradient has \n// small enough values that Safari goes batshit if you try to do it with a \n// repeating linear gradient. \n@function rr-baselines($break: s) {\n  $baseline: rr-gridbase();\n  $color: rr-prop-for-breakpoint($break, baseline_color);\n  @if not $color {\n    $color: rgba(0, 0, 0, .5);\n  }\n  @return linear-gradient(to top, #{$color} 0, #{$color} 1px, transparent 1px, transparent 100%);\n}\n\n// Pass a fontsize and how many grid-spaces of spacing you want around it,\n// and this will return font size and line-height declarations. Line-heights\n// are sent back with a unit (instead of unitless) in an attempt to keep \n// the grid a little more bullet-proof. \n//\n// If you want smaller line-height than the font size, you can pass negative \n// values.\n//\n// If you want a line height close to 1, make sure the font size is a multiple\n// of the grid base and `$steps` is 0.\n@mixin rr-font-line-height($fontsize, $steps: 0) {\n  // Our grid unit\n  $gridbase: rr-gridbase(); // Match to the font size\n  $container: ceil(calc($fontsize / $gridbase)) * $gridbase; // Add the offset value to the text\n  $leading: $steps * $gridbase;\n  font-size: $fontsize;\n  line-height: $container + $leading;\n}\n\n// Extract all the possible font sizes out of a font size config. \n// this is more complicated than your typical keywords() op because\n// font config is organized by breakpoint, then size.\n@function rr-font-sizes($font-config: $rr-fonts) {\n  $working-map: ();\n  @each $break, $fontmap in $font-config {\n    $working-map: map-merge($working-map, $fontmap);\n  }\n\n  \n  @return map-keys($working-map);\n}\n\n\n// Pass a font tag and a lineheight tag and rr-font-config returns font size and\n// line height properties for each breakpoint.\n@mixin rr-font-compute($size: m, $lineheight: medium, $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n\n  $breaks: rr-breakpoint-list();\n\n  $linegridheight: map-get($lineheight-config, $lineheight);\n  @each $break in $breaks {\n    @if map-has-key($font-config, $break) { //only s and l pass this, bc that's all in rr-fonts\n      $font-size-set: map-get($font-config, $break);\n      @if map-has-key($font-size-set, $size) {\n        @include rr-break-directive($break) {\n          $fontsize: map-get($font-size-set, $size);\n          @include rr-font-line-height($fontsize, $linegridheight);\n        }\n      } \n    } \n  }\n}\n// Builds a list of style rules with the specified prefix, size tag, and\n// lineheight tag. Useful for building pattern libraries or if you intend\n// to expose design capabilities through css.\n@mixin rr-font-samples($prefix: 'text', $font-config, $lineheight-config) {\n  $font-sizes: rr-font-sizes($font-config);\n  @each $fs in $font-sizes {\n    @each $name, $size in $fs {\n      @each $linename, $lineheight in $lineheight-config {\n        .#{$prefix}-#{$name}-#{$linename} {\n          background-color: rgba(200, 255, 200, .3);\n          @include rr-font-compute($name, $linename,$font-config, $lineheight-config);\n        }\n      }\n    }\n  }\n}\n\n// Builds basic heading layout using the heading style configuration, including\n// media queries.\n@mixin rr-heading($config-map-tag, $heading-config, $font-config, $lineheight-config) {\n  @if map-has-key($heading-config, $config-map-tag) {\n    $config: map-get($map: $heading-config, $key: $config-map-tag);\n    $size: m;\n    @if map-has-key($config, size) {\n      $size: map-get($config, size);\n    }\n    $lineheight: medium;\n    @if map-has-key($config, lineheight) {\n      $lineheight: map-get($config, lineheight);\n    }\n    @include rr-font-compute($size, $lineheight, $font-config, $lineheight-config);\n    $font: sans-serif;\n    @if map-has-key($config, font) {\n      $font: map-get($config, font);\n    }\n    font-family: $font;\n    @if map-has-key($config, weight) {\n      font-weight: map-get($config, weight);\n    }\n    @if map-has-key($config, style) {\n      font-style: map-get($config, style);\n    }\n  }\n}\n\n// Add columns to a ::before pseudoelement, gridlines to an ::after pseudoelement.\n@mixin rr-grid-overlay {\n  &::before {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    max-width: $rr-maxwidth;\n    min-height: 100vh;\n    margin-right: auto;\n    margin-left: auto;\n    content: '';\n    z-index: 1000;\n    pointer-events: none;\n    mix-blend-mode: $rr-blend-mode;\n    $breaks: rr-breakpoint-list();\n    @each $break in $breaks {\n      $offset: rr-prop-for-breakpoint($break, offset);\n      $gutter: rr-prop-for-breakpoint($break, gutter);\n      $cols: rr-prop-for-breakpoint($break, columns);\n      @include rr-break-directive($break) {\n        @if $offset > 0 {\n          width: calc(100% - (2 * #{$offset}));\n        } @else {\n          width: 100%;\n        }\n        background-image: rr-columns($break);\n        background-size: calc(100% + #{$gutter});\n      }\n    }\n  }\n\n  &::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    min-height: 100vh;\n    margin-right: auto;\n    margin-left: auto;\n    content: '';\n    z-index: 1000;\n    pointer-events: none;\n    mix-blend-mode: $rr-blend-mode;\n    $breaks: rr-breakpoint-list();\n    @each $break in $breaks {\n      @include rr-break-directive($break) {\n        background: transparent rr-baselines($break) scroll repeat left top / 100% rr-gridbase();\n      }\n    }\n  }\n}\n","\n// maximum content width\n// If you are going for a full fluid design, set this\n// value to 100%.\n$rr-maxwidth: 72rem !default;\n\n// Divisions of the base grid size.\n$rr-line-height: 1rem !default;\n\n// How many grid squares will fit in the default line\n// height. The larger this number is, the more options\n// you have but the more difficult it becomes to establish\n// a vertical rhythm.\n$rr-grid-divisions: 2 !default;\n\n// By default, the last breakpoint is set to `$rr-maxwidth`\n// + `$rr-maxwidth-margin` to prevent a case where the\n// max content width sits against left and right margins.// \n// If you are going for a full fluid design, set this value\n// to 0.\n$rr-maxwidth-margin: 4rem !default;\n\n// Blend mode for the grid/columns overlay. This might not\n// work on all browsers. (Looking at you, Edge.)\n$rr-blend-mode: exclusion !default;\n\n// IE support flag; should be `true` if you need to support\n// IE 11 and plan to use CSS grid layouts. (We do.)\n$rr-support-ie: true !default;\n\n// Default responsive settings, assuming a mobile-first\n// approach. The first breakpoint will be used as the \n// default settings outside of a media query. If you do\n// not redefine a setting in a larger breakpoint it \n// will inherit from one of the smaller breakpoints,\n// just as you would expect.\n\n$rr-grid-settings: (\n  s: (\n    mq: max-width,\n    size: 35rem,\n    columns: 4,\n    gutter: calc(1rem / $rr-grid-divisions),\n    offset: 1rem,\n    vspace: 2,\n    column_color: rgba(128, 128, 128, .2),\n    baseline_color: rgba(128, 128, 128, .2)\n  ),\n  m: (\n    mq: min-width,\n    size: 35rem,\n    columns: 8,\n    gutter: 1rem,\n    offset: 2rem,\n    vspace: 3\n  ),\n  l: (\n    size: 48rem,\n    columns: 12\n  ),\n  xl: (\n    size: $rr-maxwidth + 4rem,\n    gutter: 2rem,\n    offset: 0,\n    vspace: 4\n  )\n) !default;\n\n$rr-grids: (\n  2-up: (\n    m: (\n      columns: 2,\n    )\n  ),\n  3-up: (\n    m: (\n      columns: 3,\n    )\n  ),\n  4-up: (\n    m: (\n      columns: 2,\n    ),\n    l: (\n      columns: 4,\n    )\n  ),\n  5-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 5,\n    )\n  ),\n  6-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 6,\n    )\n  ),\n  sidebar-left: (\n    m: (\n      columns: 3,\n      areas: side main main,\n      flex-areas: (\n        article: 66.6%,\n        sidebar: 33.3%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: side main main main,\n      flex-areas: (\n        article: 75%,\n        sidebar: 25%\n      )\n    )\n  ),\n  sidebar-right: (\n    m: (\n      columns: 3,\n      areas: main main side,\n      flex-areas: (\n        article: 66.6%,\n        sidebar: 33.3%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: main main main side,\n      flex-areas: (\n        article: 75%,\n        sidebar: 25%\n      )\n    )\n  ),\n  major-left: (\n    m: (\n      columns: 2,\n      areas: major minor,\n    ),\n    l: (\n      columns: 3,\n      areas: major major minor,\n      flex-areas: (\n        major: 66.6%,\n        minor: 33.3%\n      )\n    )\n  ),\n  major-right: (\n    m: (\n      columns: 2,\n      areas: minor major,\n    ),\n    l: (\n      columns: 3,\n      areas: minor major major,\n      flex-areas: (\n        major: 66.6%,\n        minor: 33.3%\n      )\n    )\n  )\n) !default;\n\n$rr-fonts: (\n  s: (\n    xs: .75rem,\n    s: .875rem,\n    m: 1rem,\n    l: 1.125rem,\n    xl: 1.25rem,\n    2xl: 1.45rem,\n    3xl: 1.67rem,\n    4xl: 1.92rem,\n    5xl: 2.24rem\n  ),\n  l: (\n    2xl: 1.5rem,\n    3xl: 2.25rem,\n    4xl: 3rem,\n    5xl: 4.5rem\n  )\n) !default;\n\n$rr-headings: (\n  h1: (\n    size: 5xl,\n    lineheight: tight,\n    font: serif,\n    weight: normal\n  ),\n  h2: (\n    size: 4xl,\n    lineheight: tight,\n    font: serif,\n    weight: normal,\n  ),\n  h3: (\n    size: 3xl,\n    weight: normal,\n  ),\n  h4: (\n    size: 2xl,\n    weight: normal,\n  ),\n  h5: (\n    size: xl,\n    weight: normal,\n    style: italic\n  ),\n  h6: (\n    size: l,\n    weight: bold\n  )\n) !default;\n\n$rr-lineheights: (\n  squeeze: -1,\n  tight: 0,\n  medium: 1,\n  wide: 2,\n  huge: 3,\n  redic: 4\n) !default;\n\n\n// $rr-fonts: typography.$fonts;\n// $rr-lineheights: typography.$lineheights;"]}